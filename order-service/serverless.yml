service: order-service

custom:
  tableName: 'orders-table-${self:provider.stage}'
  queueName: 'OrderQueue'
  dynamodb:
    start:
      migrate: true
    stages:
      - dev


provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: '20201221'
  stage: dev
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - sqs:SendMessage
          Resource:
            - Fn::GetAtt: [ OrdersTable, Arn ]
            - Fn::GetAtt: [ OrderQueue, Arn ]
  environment:
    NODE_ENV: dev
    ORDERS_TABLE: ${self:custom.tableName}
    ORDERS_QUEUE: ${self:custom.queueName}
    ACCOUNT_ID: ${aws:accountId}

plugins:
  - serverless-plugin-typescript 
  - serverless-offline

functions:
  orders:
    handler: app/handler.orders
    events:
      - http:
          path: /
          method: ANY
      - http:
          path: /{proxy+}
          method: ANY

resources:
  Resources:
    OrderQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueName}
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
